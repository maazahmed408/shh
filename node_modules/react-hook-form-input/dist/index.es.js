import { useState, useRef, useEffect, isValidElement, cloneElement, createElement } from 'react';
import { useFormContext } from 'react-hook-form';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

const isUndefined = (val) => val === undefined;
function getValue(target, { isCheckbox }) {
    // the following logic is specific for react-select
    if (target && (Array.isArray(target) || (target.label && target.value))) {
        return target;
    }
    return target
        ? isCheckbox
            ? isUndefined(target.checked)
                ? target
                : target.checked
            : isUndefined(target.value)
                ? target
                : target.value
        : target;
}
const RHFInput = (_a) => {
    var { innerProps, setValue: setValueFromProp, register: registerFromProp, unregister: unregisterFromProp, name, rules, mode = 'onSubmit', as: InnerComponent, onChange, onBlur, type, value, defaultValue, defaultChecked, onChangeName, onChangeEvent, onBlurName, onBlurEvent } = _a, rest = __rest(_a, ["innerProps", "setValue", "register", "unregister", "name", "rules", "mode", "as", "onChange", "onBlur", "type", "value", "defaultValue", "defaultChecked", "onChangeName", "onChangeEvent", "onBlurName", "onBlurEvent"]);
    const isCheckbox = type === 'checkbox';
    const isOnChange = mode === 'onChange';
    const isOnBlur = mode === 'onBlur';
    const defaultData = isCheckbox
        ? isUndefined(defaultChecked)
            ? false
            : defaultChecked
        : defaultValue;
    const [inputValue, setInputValue] = useState(defaultData);
    const valueRef = useRef(defaultData);
    const methods = useFormContext() || {};
    const setValue = setValueFromProp || methods.setValue;
    const register = registerFromProp || methods.register;
    const unregister = unregisterFromProp || methods.unregister;
    const commonTask = (target) => {
        const data = getValue(target, { isCheckbox });
        setInputValue(data);
        valueRef.current = data;
        return data;
    };
    const eventWrapper = (event, eventName) => {
        return async (...arg) => {
            const data = commonTask(await event(arg));
            setValue(name, data, (isOnChange && eventName === 'onChange') ||
                (isOnBlur && eventName === 'onBlur'));
        };
    };
    const handleChange = (e) => {
        const data = commonTask(e && e.target ? e.target : e);
        setValue(name, data, isOnChange);
        if (onChange) {
            onChange(e);
        }
    };
    const handleBlur = (e) => {
        const data = commonTask(e && e.target ? e.target : e);
        setValue(name, data, isOnBlur);
        if (onBlur) {
            onBlur(e);
        }
    };
    useEffect(() => {
        register(Object.defineProperty({
            name,
        }, 'value', {
            set(data) {
                setInputValue(data);
                valueRef.current = data;
            },
            get() {
                return valueRef.current;
            },
        }), Object.assign({}, rules));
        return () => {
            if (unregister) {
                unregister(name);
            }
        };
    }, [register, unregister, name]); // eslint-disable-line react-hooks/exhaustive-deps
    const props = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, innerProps), (onChangeEvent
        ? {
            [onChangeName || 'onChange']: eventWrapper(onChangeEvent, 'onChange'),
        }
        : { onChange: handleChange })), (isOnBlur
        ? onBlurEvent
            ? {
                [onBlurName || 'onBlur']: eventWrapper(onBlurEvent, 'onBlur'),
            }
            : { onBlur: handleBlur }
        : {})), { value: inputValue || value || '' }), (isCheckbox ? { checked: inputValue } : {})), rest);
    return isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, Object.assign({}, props)));
};

export { RHFInput };
