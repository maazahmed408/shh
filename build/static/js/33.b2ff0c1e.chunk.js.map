{"version":3,"sources":["views/config.js/baseUrl.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","views/Hospital/SignUp List/ReadOnlyRow2.js","views/Hospital/SignUp List/EditableRow2.js","views/Hospital/SignUp List/SignUp List.js"],"names":["exports","baseUrl","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","ReadOnlyRow2","contact","handleEditClick","handleDeleteClick","useState","style","height","hospitalName","hospitalCode","hospitalType","hospitalAddress","city","state","phone","status","EditableRow","editFormData","handleEditFormChange","handleCancelClick","placeholder","name","value","onChange","type","required","duty","className","class","onClick","SignUp_List","valueData","setvalueData","resultDAta","a","axios","get","headers","Authorization","localStorage","getItem","result","data","useEffect","contacts","setContacts","editContactId","setEditContactId","onSubmit","event","preventDefault","editedContact","id","hospitalLocation","newContacts","findIndex","paddingTop","marginLeft","width","length","map","EditableRow2"],"mappings":"sGAAAA,EAAQC,QAAU,oC,6FCIH,SAASC,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOH,MAAMM,KAAKH,GFInF,CAAgBJ,IAAQ,OAAAQ,EAAA,GAA2BR,IGLvE,WACb,MAAM,IAAIS,UAAU,wIHIwE,K,mJIuB/EC,EAxBM,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,QACpB,GADsE,EAAzCC,gBAAyC,EAAxBC,kBACZC,mBAAS,KAA3C,6BASA,OACI,qBAAIC,MAAO,CAAEC,OAAQ,OAArB,UACI,6BAAKL,EAAQM,eACb,6BAAKN,EAAQO,eACb,6BAAKP,EAAQQ,eACb,6BAAKR,EAAQS,kBACb,6BAAKT,EAAQU,OACb,6BAAKV,EAAQW,QACb,6BAAKX,EAAQY,QACb,6BAAKZ,EAAQa,aCsBVC,EA3CK,SAAC,GAId,IAHLC,EAGI,EAHJA,aACAC,EAEI,EAFJA,qBACAC,EACI,EADJA,kBAEA,OACE,+BACE,6BAEE,uBACEC,YAAY,eACZC,KAAK,OACLC,MAAOL,EAAaT,aACpBe,SAAUL,MAId,6BACE,uBACEM,KAAK,OACLC,SAAS,WACTL,YAAY,OACZC,KAAK,OACLC,MAAOL,EAAaS,KACpBH,SAAUL,MAId,6BACE,sBAAKS,UAAU,qCAAf,UACE,qBAAKA,UAAU,WAAf,SACF,wBAAQH,KAAK,SAASI,MAAM,aAA5B,oBACA,qBAAKD,UAAU,WAAf,SACA,wBAASA,UAAU,aAAYH,KAAK,SAASK,QAASV,EAAtD,+BCwEOW,UAnGK,WAClB,MAAkCzB,mBAAS,IAA3C,mBAAO0B,EAAP,KAAkBC,EAAlB,KAEMC,EAAU,uCAAG,4BAAAC,EAAA,sEACIC,IAAMC,IAAI/C,UAAU,2BAA4B,CACnEgD,QAAS,CACPC,cAAe,UAAYC,aAAaC,QAAQ,YAHnC,OACXC,EADW,OAMjBT,EAAaS,EAAOC,MANH,2CAAH,qDAQhBC,qBAAU,WACRV,MACC,IAEH,MAAgC5B,mBAAS0B,GAAzC,mBAAOa,EAAP,KAAiBC,EAAjB,KAEA,EAAwCxC,mBAAS,CAC/CG,aAAc,IACdC,aAAc,IACdC,aAAc,IACdC,gBAAiB,IACjBC,KAAM,IACNC,MAAO,IACPC,MAAO,MAPT,mBAAOG,EAAP,KASA,GATA,KAS0CZ,mBAAS,OAAnD,mBAAOyC,EAAP,KAAsBC,EAAtB,KAeA,OACE,mCACE,8BACE,yBAASpB,UAAU,UAAnB,SACE,qBAAKA,UAAU,kBAAf,SACE,qBAAKA,UAAU,eAAf,SACE,qBAAKA,UAAU,iCAAf,SACE,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,SAAf,SACE,0DAEF,qBAAKC,MAAM,wBAAX,SACE,sBAAMoB,SA1BK,SAACC,GAC5BA,EAAMC,iBACN,IAAMC,EAAgB,CACpBC,GAAIN,EACJtC,aAAcS,EAAaT,aAC3B6C,iBAAkBpC,EAAaoC,kBAE3BC,EAAW,YAAOV,GAExBU,EADcV,EAASW,WAAU,SAACrD,GAAD,OAAaA,EAAQkD,KAAON,MACxCK,EACrBN,EAAYS,GACZP,EAAiB,OAeD,SACE,wBAAOnB,MAAM,4EAAb,UACE,gCACE,qBACED,UAAU,eACVrB,MAAO,CACLkD,WAAY,OACZC,WAAY,OACZC,MAAO,OALX,UAQE,+CACA,+CACA,+CACA,kDACA,sCACA,uCACA,uCACA,6CAGJ,0BACA,uBAAOpD,MAAO,CAAEoD,MAAO,OAAvB,SACwB,IAArB3B,EAAU4B,QACT5B,EAAU6B,KAAI,SAACtC,GAAD,OACZ,cAAC,WAAD,UACGwB,IAAkBxB,EAAMd,aACvB,cAACqD,EAAD,CAAc5C,aAAcA,IAE5B,cAAC,EAAD,CAAcf,QAASoB","file":"static/js/33.b2ff0c1e.chunk.js","sourcesContent":["exports.baseUrl = \"https://ehospi-app.herokuapp.com\"","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React,{useState} from \"react\";\r\nimport { baseUrl } from 'src/views/config.js/baseUrl';\r\nimport axios from 'axios';\r\n\r\nconst ReadOnlyRow2 = ({ contact, handleEditClick, handleDeleteClick }) => {\r\n    const [valueData, setvalueData] = useState([]);\r\n    // const resultDAta = async () => {\r\n    //     let item = {};\r\n    //     const result = await axios.put(baseUrl + '/hospital/update/reject/signup', {   \r\n    //     });\r\n    //     console.log(result.data)\r\n    //     setvalueData(result.data);\r\n    // };\r\n    // resultDAta();\r\n    return (\r\n        <tr style={{ height: '5px' }}>\r\n            <td>{contact.hospitalName}</td>\r\n            <td>{contact.hospitalCode}</td>\r\n            <td>{contact.hospitalType}</td>\r\n            <td>{contact.hospitalAddress}</td>\r\n            <td>{contact.city}</td>\r\n            <td>{contact.state}</td>\r\n            <td>{contact.phone}</td>\r\n            <td>{contact.status}</td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default ReadOnlyRow2;","import React from \"react\";\r\n\r\nconst EditableRow = ({\r\n  editFormData,\r\n  handleEditFormChange,\r\n  handleCancelClick,\r\n}) => {\r\n  return (\r\n    <tr>\r\n      <td>\r\n          \r\n        <input\r\n          placeholder=\"Hospitalname\"\r\n          name=\"uid \"\r\n          value={editFormData.hospitalName}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      \r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          required=\"required\"\r\n          placeholder=\"duty\"\r\n          name=\"duty\"\r\n          value={editFormData.duty}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n     \r\n      <td>\r\n        <div className=\"col-sm-12 d-flex text align-center\">\r\n          <div className=\"col-sm-6\">\r\n        <button type=\"submit\" class=\"btn btn-sm\">Save</button></div>\r\n        <div className=\"col-sm-6\">\r\n        <button  className=\"btn btn-sm\"type=\"button\" onClick={handleCancelClick}>\r\n          Cancel\r\n        </button>\r\n        </div>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default EditableRow;","import React, { useState, Fragment, useEffect } from 'react';\r\nimport 'src/asset/plugins/bootstrap/css/bootstrap.min.css';\r\nimport 'src/asset/css/main.css';\r\nimport ReadOnlyRow2 from 'src/views/Hospital/SignUp List/ReadOnlyRow2';\r\nimport EditableRow2 from 'src/views/Hospital/SignUp List/EditableRow2';\r\nimport { baseUrl } from 'src/views/config.js/baseUrl';\r\nimport axios from 'axios';\r\n\r\nconst SignUp_List = () => {\r\n  const [valueData, setvalueData] = useState([]);\r\n\r\n  const resultDAta = async () => {\r\n    const result = await axios.get(baseUrl + '/admin/signupAllHospital', {\r\n      headers: {\r\n        Authorization: `Bearer ` + localStorage.getItem('token'),\r\n      },\r\n    });\r\n    setvalueData(result.data);\r\n  };\r\n  useEffect(() => {\r\n    resultDAta();\r\n  }, []);\r\n\r\n  const [contacts, setContacts] = useState(valueData);\r\n\r\n  const [editFormData, setEditFormData] = useState({\r\n    hospitalName: ' ',\r\n    hospitalCode: ' ',\r\n    hospitalType: ' ',\r\n    hospitalAddress: ' ',\r\n    city: ' ',\r\n    state: ' ',\r\n    phone: ' ',\r\n  });\r\n  const [editContactId, setEditContactId] = useState(null);\r\n  const handleEditFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const editedContact = {\r\n      id: editContactId,\r\n      hospitalName: editFormData.hospitalName,\r\n      hospitalLocation: editFormData.hospitalLocation,\r\n    };\r\n    const newContacts = [...contacts];\r\n    const index = contacts.findIndex((contact) => contact.id === editContactId);\r\n    newContacts[index] = editedContact;\r\n    setContacts(newContacts);\r\n    setEditContactId(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <section className=\"content\">\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row clearfix\">\r\n              <div className=\"col-lg-12 col-md-12 col-sm-12 \">\r\n                <div className=\"card\">\r\n                  <div className=\"header\">\r\n                    <h2> Hospitals Signup List</h2>\r\n                  </div>\r\n                  <div class=\"body table-responsive\">\r\n                    <form onSubmit={handleEditFormSubmit}>\r\n                      <table class=\"table table-bordered table-striped table-hover js-basic-example dataTable\">\r\n                        <thead>\r\n                          <tr\r\n                            className=\"tablepatient\"\r\n                            style={{\r\n                              paddingTop: '30px',\r\n                              marginLeft: '30px',\r\n                              width: '5px',\r\n                            }}\r\n                          >\r\n                            <th>Hospital Name</th>\r\n                            <th>Hospital Code</th>\r\n                            <th>Hospital Type</th>\r\n                            <th>Hospital Address</th>\r\n                            <th>City</th>\r\n                            <th>State</th>\r\n                            <th>Phone</th>\r\n                            <th>Status</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tfoot></tfoot>\r\n                        <tbody style={{ width: '5px' }}>\r\n                          {valueData.length !== 0 &&\r\n                            valueData.map((value) => (\r\n                              <Fragment>\r\n                                {editContactId === value.hospitalName ? (\r\n                                  <EditableRow2 editFormData={editFormData} />\r\n                                ) : (\r\n                                  <ReadOnlyRow2 contact={value} />\r\n                                )}\r\n                              </Fragment>\r\n                            ))}\r\n                        </tbody>\r\n                      </table>\r\n                    </form>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default SignUp_List;\r\n"],"sourceRoot":""}