{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/nanoid/index.browser.js","views/Bed Booking/ReadOnlyRow.js","views/Bed Booking/EditableRow.js","views/Bed Booking/All bed/All bed.js"],"names":["_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","_toConsumableArray","arrayLikeToArray","iter","from","_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","slice","constructor","name","test","_arrayLikeToArray","len","arr2","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toUpperCase","ReadOnlyRow","contact","handleEditClick","handleDeleteClick","Allotment","Discharge","className","onClick","event","class","EditableRow","editFormData","handleEditFormChange","handleCancelClick","type","required","placeholder","onChange","All_bed","useState","data","contacts","setContacts","setEditFormData","editContactId","setEditContactId","preventDefault","fieldName","target","getAttribute","fieldValue","newFormData","formValues","contactId","newContacts","index","findIndex","splice","style","paddingTop","to","borderRadius","background","color","fontSize","onSubmit","editedContact","map"],"mappings":"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","file":"static/js/11.5f9f8daf.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import { urlAlphabet } from './url-alphabet/index.js'\nif (process.env.NODE_ENV !== 'production') {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import React from \"react\";\r\nconst ReadOnlyRow = ({ contact, handleEditClick, handleDeleteClick }) => {\r\n    return (\r\n        <tr>\r\n            <td>{contact.Allotment}</td>\r\n            <td>{contact.Discharge}</td>\r\n            <td>\r\n                <div className=\"col-sm-12 d-flex text align-center\">\r\n                    <div className=\"col-sm-3\">\r\n                <button className=\"btn btn-xm px-0 py-0 btn \"\r\n                    onClick={(event) => handleEditClick(event, contact)}\r\n                >\r\n                    <i class=\"fas fa-edit\"  ></i>\r\n                </button>\r\n                </div>\r\n                <div className=\"col-sm-3\">\r\n                <button className=\"btn btn-xm px-0 py-0 btn btn-xm\"\r\n                  onClick={() => handleDeleteClick(contact.id)}\r\n                >\r\n                    <i class=\"fas fa-trash\"></i>\r\n                </button>\r\n                </div>\r\n                </div>\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default ReadOnlyRow;","import React from \"react\";\r\n\r\nconst EditableRow = ({\r\n  editFormData,\r\n  handleEditFormChange,\r\n  handleCancelClick,\r\n}) => {\r\n  return (\r\n    <tr>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          required=\"required\"\r\n          placeholder=\"Allotment\"\r\n          name=\"Allotment\"\r\n          value={editFormData.Allotment}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          required=\"required\"\r\n          placeholder=\"Discharge\"\r\n          name=\"Discharge\"\r\n          value={editFormData.Discharge}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      \r\n      <td>\r\n        <div className=\"col-sm-12 d-flex text align-center\">\r\n          <div className=\"col-sm-6\">\r\n        <button type=\"submit\" class=\"btn btn-sm\">Save</button></div>\r\n        <div className=\"col-sm-6\">\r\n        <button  className=\"btn btn-sm\"type=\"button\" onClick={handleCancelClick}>\r\n          Cancel\r\n        </button></div>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default EditableRow;","import React, { useState, Fragment } from \"react\";\r\nimport \"src/asset/plugins/bootstrap/css/bootstrap.min.css\";\r\nimport \"src/asset/css/main.css\";\r\nimport { Link } from \"react-router-dom\";\r\n//import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n//import { faEdit , faDeleteLeft} from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport data from \"src/views/Bed Booking/mock-data.json\";\r\nimport ReadOnlyRow from \"src/views/Bed Booking/ReadOnlyRow\";\r\nimport EditableRow from \"src/views/Bed Booking/EditableRow\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\n\r\nconst All_bed = () => {\r\n    const [contacts, setContacts] = useState(data);\r\n    const [addFormData, setAddFormData] = useState({\r\n        \r\n        Allotment: \"\",\r\n        Discharge: \"\",\r\n        \r\n\r\n    });\r\n    const [editFormData, setEditFormData] = useState({\r\n       \r\n        Allotment: \"\",\r\n        Discharge: \"\"\r\n        \r\n\r\n    });\r\n\r\n    const [editContactId, setEditContactId] = useState(null);\r\n\r\n    const handleAddFormChange = (event) => {\r\n        event.preventDefault();\r\n\r\n        const fieldName = event.target.getAttribute(\"name\");\r\n        const fieldValue = event.target.value;\r\n\r\n        const newFormData = { ...addFormData };\r\n        newFormData[fieldName] = fieldValue;\r\n\r\n        setAddFormData(newFormData);\r\n    };\r\n\r\n    const handleEditFormChange = (event) => {\r\n        event.preventDefault();\r\n\r\n        const fieldName = event.target.getAttribute(\"name\");\r\n        const fieldValue = event.target.value;\r\n\r\n        const newFormData = { ...editFormData };\r\n        newFormData[fieldName] = fieldValue;\r\n\r\n        setEditFormData(newFormData);\r\n    };\r\n\r\n    const handleAddFormSubmit = (event) => {\r\n        event.preventDefault()\r\n        const newContact = {\r\n            id: nanoid(),\r\n           \r\n            Allotment: addFormData.Allotment,\r\n            Discharge: addFormData.Discharge,\r\n            \r\n\r\n        };\r\n        const newContacts = [...contacts, newContact];\r\n        setContacts(newContacts);\r\n    };\r\n\r\n    const handleEditFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const editedContact = {\r\n            id: editContactId,\r\n           \r\n            Allotment: editFormData.Allotment,\r\n            Discharge: editFormData.Discharge,\r\n           \r\n\r\n\r\n        };\r\n\r\n        const newContacts = [...contacts];\r\n        const index = contacts.findIndex((contact) => contact.id === editContactId);\r\n\r\n        newContacts[index] = editedContact;\r\n\r\n        setContacts(newContacts);\r\n        setEditContactId(null);\r\n    };\r\n\r\n    const handleEditClick = (event, contact) => {\r\n        event.preventDefault();\r\n        setEditContactId(contact.id);\r\n        const formValues = {\r\n           \r\n            Allotment: contact.Allotment,\r\n            Discharge: contact.Discharge,\r\n           \r\n\r\n        };\r\n\r\n        setEditFormData(formValues);\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        setEditContactId(null);\r\n    };\r\n\r\n    const handleDeleteClick = (contactId) => {\r\n        const newContacts = [...contacts];\r\n        const index = contacts.findIndex((contact) => contact.id === contactId);\r\n        newContacts.splice(index, 1);\r\n        setContacts(newContacts);\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <section class=\"content\">\r\n                    <div class=\"container-fluid\">\r\n                        {/*<div class=\"block-header\">\r\n                            <h2>All bed</h2>\r\n                            <small class=\"text-muted\">Welcome to bed booking</small>\r\n                        </div>*/}\r\n                        <div class=\"row clearfix\">\r\n                            <div class=\"Alldoctor col-lg-12 col-md-12 col-sm-12\">\r\n                                <div class=\"card\">\r\n                                    <div class=\"header\">\r\n                                        <div class=\" Addnow1 col row-12 d-flex\">\r\n                                            <h2 class=\"col-10\" style={{paddingTop:'10px'}}>Bed Menu</h2>\r\n                                            <div className=\" Addnow1\">\r\n                                            <Link to=\"Bed Expense\">\r\n                                                <button class=\" col-2\" type=\"button\"  className=\"bedexpense btn btn-primary\" style={{ borderRadius: '10px', background:'#056078',color: 'white', fontSize:'10px' }}>Add Now</button>\r\n                                            </Link>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                    <div class=\"body table-responsive\">\r\n                                        <form onSubmit={handleEditFormSubmit}>\r\n                                            <table class=\"table table-bordered table-striped table-hover js-basic-example dataTable\">\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        \r\n                                                        <th>Facility</th>\r\n                                                        <th>charges</th>\r\n                                                        \r\n                                                        <th>Action</th>\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                {/*<tfoot>\r\n                                                <tr>\r\n                                                    <th>Name</th>\r\n                                                    <th>Position</th>\r\n                                                    <th>Office</th>\r\n                                                    <th>Age</th>\r\n                                                    <th>Start date</th>\r\n                                                    <th>Salary</th>\r\n                                                </tr>\r\n                                            </tfoot>*/}\r\n                                                <tbody>\r\n                                                    {contacts.map((contact) => (\r\n                                                        <Fragment>\r\n                                                            {editContactId === contact.id ? (\r\n                                                                <EditableRow\r\n                                                                    editFormData={editFormData}\r\n                                                                    handleEditFormChange={handleEditFormChange}\r\n                                                                    handleCancelClick={handleCancelClick}\r\n                                                                />\r\n                                                            ) : (\r\n                                                                <ReadOnlyRow\r\n                                                                    contact={contact}\r\n                                                                    handleEditClick={handleEditClick}\r\n                                                                    handleDeleteClick={handleDeleteClick}\r\n                                                                />\r\n                                                            )}\r\n                                                        </Fragment>\r\n                                                    ))}\r\n\r\n\r\n\r\n\r\n\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </form>\r\n                                        {/*<form onSubmit={handleAddFormSubmit}>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                name=\"Room_No\"\r\n                                                required=\"required\"\r\n                                                placeholder=\"Enter Room_no\"\r\n                                                onChange={handleAddFormChange}\r\n                                            />\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                name=\"Patient\"\r\n                                                required=\"required\"\r\n                                                placeholder=\"Patient\"\r\n                                                onChange={handleAddFormChange}\r\n                                            />\r\n                                             <input\r\n                                                type=\"text\"\r\n                                                name=\"Allotment\"\r\n                                                required=\"required\"\r\n                                                placeholder=\"Allotment\"\r\n                                                onChange={handleAddFormChange}\r\n                                            />\r\n                                             <input\r\n                                                type=\"text\"\r\n                                                name=\"Discharge\"\r\n                                                required=\"required\"\r\n                                                placeholder=\"Discharge\"\r\n                                                onChange={handleAddFormChange}\r\n                                            />\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                name=\"Room_Type\"\r\n                                                required=\"required\"\r\n                                                placeholder=\"Room_Type\"\r\n                                                onChange={handleAddFormChange}\r\n                                            />\r\n                                            <button className=\"btn btn-primary\" type=\"submit\">Add</button>\r\n                                            </form>*/}\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\nexport default All_bed;"],"sourceRoot":""}